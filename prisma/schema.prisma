// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  bio           String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts     Post[]
  comments  Comment[]
  bookmarks Bookmark[]
  likes     Like[]
  follower    Follow[] @relation("follower")
  following    Follow[] @relation("following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String     @id @default(cuid())
  body      String     @db.Text
  userId    String
  imageUrl  String?
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  body      String   @db.Text
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// model Comment {
//   id        String     @id @default(cuid())
//   body      String     @db.Text
//   postId    String
//   userId    String
//   parentId  String?    @map("parent_id")  // Self-referencing relationship
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
//   parent Comment? @relation("replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   replies Comment[] @relation("replies")
// }

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id         String @id @default(cuid())
  followerId String
  followingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  follower   User @relation("follower", fields: [followerId], references: [id])
  following  User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
